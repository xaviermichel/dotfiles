set nocompatible        " Use Vim defaults (much better!
set vb t_vb=            " pas de beep
set showcmd             " Show (partial) command in status line.
set showmatch           " Show matching brackets.
set ignorecase          " Do case insensitive matching
set incsearch           " Incremental search

set tabstop=4
set softtabstop=4       " Largeur d'une tabulation
set shiftwidth=4        " Largeur de l'indentation
"set fdm=indent          " Repli selon l'indentation
"set expandtab           " Utilise des espaces plutôue le caractè tabulation

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Only do this part when compiled with support for autocommands.
if has("autocmd")
	" Enable file type detection.
	" Use the default filetype settings, so that mail gets 'tw' set to 72,
	" 'cindent' is on in C files, etc.
	" Also load indent files, to automatically do language-dependent indenting.
	filetype plugin indent on

	" Set File type to 'text' for files ending in .txt
	autocmd BufNewFile,BufRead *.txt setfiletype text

	" Enable soft-wrapping for text files
	autocmd FileType text,markdown,html,xhtml,eruby setlocal wrap linebreak nolist

	" Put these in an autocmd group, so that we can delete them easily.
	augroup vimrcEx
		au!

		" For all text files set 'textwidth' to 78 characters.
		" autocmd FileType text setlocal textwidth=78

		" When editing a file, always jump to the last known cursor position.
		" Don't do it when the position is invalid or when inside an event handler
		" (happens when dropping a file on gvim).
		autocmd BufReadPost *
					\ if line("'\"") > 0 && line("'\"") <= line("$") |
					\   exe "normal g`\"" |
					\ endif

		" Automatically load .vimrc source when saved
		autocmd BufWritePost .vimrc source $MYVIMRC

	augroup END

else

	set autoindent                " always set autoindenting on

endif " has("autocmd")


set background=dark

syntax on               " Coloration
set number              " Numétation
"set background=dark     " Coloration pour les fonds sombres
"set mouse=a             " Utiliser la souris... c'est us pratique ^^
"filetype indent on      " Indentation automatique

" Supprime les espaces en fin de ligne avant de sauver
autocmd BufWrite * silent! %s/[\r \t]\+$//

" changement des touches de déacement
"noremap j <C-h>
"noremap k <C-j>
"noremap l <C-k>
"noremap m <C-l>

if has("spell")
	" Les dictionnaires seront telecharges automatiquement si le repertoire ~/.vim/spell existe
	if !filewritable($HOME."/.vim/spell")
		call mkdir($HOME."/.vim/spell", "p")
	endif
	set spellsuggest=10 " La commande z= affiche des suggestions, je n'en veux que 10 pour ne pas surcharger l'éan
	" On regle les touches d'activation manuelle de la correction orthographique
	noremap ,sf :setlocal spell spelllang=fr <CR>
	noremap ,se :setlocal spell spelllang=en <CR>
	noremap ,sn :setlocal nospell <CR>
	" On active automatiquement le mode spell pour les fichiers texte et LaTeX
	autocmd BufEnter *.txt,*.tex setlocal spell
	autocmd BufEnter *.txt,*.tex setlocal spelllang=fr
endif

" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Multiple Plug commands can be written in a single line using | separators
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" On-demand loading
Plug 'scrooloose/nerdtree', { 'on':  'NERDTreeToggle' }
let g:NERDTreeDirArrowExpandable = '>'
let g:NERDTreeDirArrowCollapsible = 'v'
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Using a non-master branch
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" Using a tagged release; wildcard allowed (requires git 1.9.2 or above)
Plug 'fatih/vim-go', { 'tag': '*' }

" Plugin options
Plug 'nsf/gocode', { 'tag': 'v.20150303', 'rtp': 'vim' }

" Plugin outside ~/.vim/plugged with post-update hook
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" Unmanaged plugin (manually installed and updated)
Plug '~/my-prototype-plugin'

" NERD tree will be loaded on the first invocation of NERDTreeToggle command
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }

" Multiple commands
Plug 'junegunn/vim-github-dashboard', { 'on': ['GHDashboard', 'GHActivity'] }

" Loaded when clojure file is opened
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Multiple file types
Plug 'kovisoft/paredit', { 'for': ['clojure', 'scheme'] }

" On-demand loading on both conditions
Plug 'junegunn/vader.vim',  { 'on': 'Vader', 'for': 'vader' }

" ansible tool
Plug 'pearofducks/ansible-vim'

" status bar
Plug 'bling/vim-airline'

" Initialize plugin system
call plug#end()

